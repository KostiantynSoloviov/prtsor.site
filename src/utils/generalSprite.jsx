import React from "react";

const prefix = "img";

const files = {
  byId: {
    window: {
      width: 30,
      height: 30,
      viewBox: [0, 0, 30, 30],
      data: '<path xmlns="http://www.w3.org/2000/svg" d="M.2 298.669L0 90.615l256.007-34.76v242.814H.201zM298.658 49.654L639.905-.012v298.681H298.657V49.654zM640 341.331l-.071 298.681L298.669 592V341.332h341.33zM255.983 586.543L.189 551.463v-210.18h255.794v245.26z fill="white"/>',
    },
    logoWhite: {
      width: 150,
      height: 100,
      viewBox: [0, 0, 150, 100],
      data: '<path xmlns="http://www.w3.org/2000/svg" fill-rule="evenodd" clip-rule="evenodd" d="M2058.32 152.173H2210.36C2292.96 152.173 2362.55 208.918 2382.19 285.473H2329.14C2311.19 237.286 2264.7 202.85 2210.36 202.85H2058.32C2025.59 202.85 1996.6 181.969 1986.21 150.904L1970.2 102.812C1959.81 71.6948 1930.82 50.8164 1898.08 50.8164H1661.11C1628.38 50.8164 1599.39 71.6972 1589.05 102.762L1572.99 150.906C1562.6 181.973 1533.61 202.852 1500.87 202.852H1348.84C1294.49 202.852 1248.01 237.287 1230.06 285.473H1177.01C1196.65 208.918 1266.24 152.173 1348.84 152.173H1500.87C1511.77 152.173 1521.45 145.229 1524.94 134.841L1540.96 86.7485C1558.19 34.9551 1606.48 0.139526 1661.11 0.139526H1898.08C1952.71 0.139526 2001.01 34.9551 2018.29 86.7984L2034.3 134.841C2037.75 145.229 2047.43 152.173 2058.32 152.173ZM1189.06 862.64C1217.78 921.989 1278.6 963.017 1348.84 963.017H2210.36C2280.59 963.017 2341.42 921.989 2370.13 862.64H2310.89C2287.71 892.833 2251.26 912.338 2210.36 912.338H1348.84C1307.94 912.338 1271.49 892.833 1248.3 862.64H1189.06Z" fill="rgba(255, 255, 255, 0.8)"/><path xmlns="http://www.w3.org/2000/svg" d="M412.097 414.579C449.036 453.659 467.505 502.108 467.505 559.925C467.505 617.742 448.768 666.458 411.294 706.074C374.355 745.154 328.584 764.694 273.979 764.694C212.414 764.694 164.501 743.012 130.239 699.649V900.403H68.4068V364.792H126.224V427.427C141.213 404.943 161.824 387.544 188.056 375.231C214.288 362.383 242.929 355.959 273.979 355.959C329.654 355.959 375.694 375.499 412.097 414.579ZM363.916 665.923C390.683 638.085 404.067 603.02 404.067 560.728C404.067 518.436 390.683 483.371 363.916 455.533C337.684 427.16 304.761 412.973 265.145 412.973C227.671 412.973 195.551 425.821 168.784 451.518C142.552 477.214 129.436 513.35 129.436 559.925C129.436 607.57 142.284 644.241 167.981 669.938C194.212 695.099 226.601 707.68 265.145 707.68C304.761 707.68 337.684 693.761 363.916 665.923ZM799.822 364.792V419.397H776.534C742.272 419.397 713.096 429.836 689.006 450.715C665.45 471.593 653.673 499.431 653.673 534.228V755.86H591.841V364.792H649.658V420.2C678.566 381.12 718.985 361.58 770.913 361.58C781.085 361.58 790.721 362.651 799.822 364.792ZM1112.44 703.665V755.86C1086.21 761.749 1064.53 764.694 1047.39 764.694C1005.64 764.694 973.25 753.987 950.23 732.573C927.21 711.159 915.7 679.574 915.7 637.817V420.2H849.853V364.792H915.7V257.991H977.533V364.792H1099.59V420.2H977.533V633.802C977.533 660.569 984.224 679.842 997.608 691.619C1011.53 702.861 1032.41 708.483 1060.24 708.483C1075.23 708.483 1092.63 706.877 1112.44 703.665ZM1183.79 688.407L1223.14 647.453C1243.49 668.332 1261.95 683.589 1278.55 693.225C1295.68 702.861 1314.69 707.68 1335.56 707.68C1357.51 707.68 1375.45 702.861 1389.37 693.225C1403.29 683.054 1410.24 669.403 1410.24 652.272C1410.24 637.282 1405.16 625.772 1394.99 617.742C1385.35 609.176 1367.68 599.808 1341.99 589.636L1304.25 573.576C1270.52 559.657 1245.89 544.4 1230.37 527.804C1214.84 511.209 1207.08 490.33 1207.08 465.169C1207.08 431.978 1219.39 405.478 1244.02 385.671C1269.18 365.863 1300.77 355.959 1338.78 355.959C1391.78 355.959 1435.41 376.57 1469.67 417.791L1431.93 456.336C1403.02 427.427 1370.9 412.973 1335.56 412.973C1315.76 412.973 1299.96 417.256 1288.19 425.821C1276.41 434.387 1270.52 446.432 1270.52 461.957C1270.52 474.27 1274.8 484.441 1283.37 492.472C1292.47 499.966 1309.33 508.8 1333.96 518.971L1370.09 534.228C1407.57 550.289 1434.07 567.152 1449.59 584.818C1465.65 601.949 1473.68 623.631 1473.68 649.863C1473.68 686.266 1460.3 714.639 1433.53 734.982C1407.3 754.79 1374.91 764.694 1336.37 764.694C1273.73 764.694 1222.87 739.265 1183.79 688.407ZM1573.34 559.925C1572.27 504.249 1592.08 456.068 1632.76 415.382C1673.45 374.696 1721.9 354.888 1778.11 355.959C1811.83 355.959 1842.62 363.454 1870.45 378.443C1898.29 393.433 1921.31 414.311 1939.51 441.079L1895.35 476.411C1864.3 434.119 1825.48 412.973 1778.91 412.973C1738.76 412.973 1705.03 427.427 1677.73 456.336C1650.43 484.709 1636.78 519.239 1636.78 559.925C1636.78 601.146 1650.43 636.211 1677.73 665.12C1705.03 693.493 1738.76 707.68 1778.91 707.68C1824.95 707.68 1863.49 686.801 1894.54 645.044L1938.71 679.574C1900.17 736.32 1846.63 764.694 1778.11 764.694C1721.36 764.694 1672.91 744.886 1632.76 705.271C1593.15 665.12 1573.34 616.671 1573.34 559.925ZM2267.77 364.792V419.397H2244.48C2210.22 419.397 2181.04 429.836 2156.95 450.715C2133.4 471.593 2121.62 499.431 2121.62 534.228V755.86H2059.79V364.792H2117.61V420.2C2146.52 381.12 2186.93 361.58 2238.86 361.58C2249.03 361.58 2258.67 362.651 2267.77 364.792ZM2570.97 688.407L2610.32 647.453C2630.66 668.332 2649.13 683.589 2665.73 693.225C2682.86 702.861 2701.86 707.68 2722.74 707.68C2744.69 707.68 2762.62 702.861 2776.54 693.225C2790.46 683.054 2797.42 669.403 2797.42 652.272C2797.42 637.282 2792.34 625.772 2782.16 617.742C2772.53 609.176 2754.86 599.808 2729.17 589.636L2691.42 573.576C2657.7 559.657 2633.07 544.4 2617.55 527.804C2602.02 511.209 2594.26 490.33 2594.26 465.169C2594.26 431.978 2606.57 405.478 2631.2 385.671C2656.36 365.863 2687.94 355.959 2725.95 355.959C2778.95 355.959 2822.58 376.57 2856.84 417.791L2819.1 456.336C2790.19 427.427 2758.07 412.973 2722.74 412.973C2702.93 412.973 2687.14 417.256 2675.36 425.821C2663.59 434.387 2657.7 446.432 2657.7 461.957C2657.7 474.27 2661.98 484.441 2670.55 492.472C2679.65 499.966 2696.51 508.8 2721.14 518.971L2757.27 534.228C2794.74 550.289 2821.24 567.152 2836.77 584.818C2852.83 601.949 2860.86 623.631 2860.86 649.863C2860.86 686.266 2847.48 714.639 2820.71 734.982C2794.48 754.79 2762.09 764.694 2723.54 764.694C2660.91 764.694 2610.05 739.265 2570.97 688.407ZM2988.62 755.86V364.792H3050.45V755.86H2988.62ZM2973.36 215.431C2973.36 203.119 2977.91 192.679 2987.01 184.114C2996.12 175.013 3007.09 170.463 3019.94 170.463C3032.25 170.463 3042.96 175.013 3052.06 184.114C3061.16 192.679 3065.71 203.119 3065.71 215.431C3065.71 228.28 3061.16 238.987 3052.06 247.552C3043.49 256.118 3032.79 260.4 3019.94 260.4C3007.09 260.4 2996.12 256.118 2987.01 247.552C2977.91 238.987 2973.36 228.28 2973.36 215.431ZM3415.9 703.665V755.86C3389.67 761.749 3367.99 764.694 3350.86 764.694C3309.1 764.694 3276.71 753.987 3253.69 732.573C3230.67 711.159 3219.16 679.574 3219.16 637.817V420.2H3153.31V364.792H3219.16V257.991H3280.99V364.792H3403.05V420.2H3280.99V633.802C3280.99 660.569 3287.69 679.842 3301.07 691.619C3314.99 702.861 3335.87 708.483 3363.7 708.483C3378.69 708.483 3396.09 706.877 3415.9 703.665ZM3861.65 579.197H3552.49C3556.24 617.742 3571.49 648.792 3598.26 672.347C3625.03 695.902 3657.68 707.68 3696.23 707.68C3740.66 707.68 3780.54 690.013 3815.88 654.681L3852.01 696.437C3808.11 741.942 3755.92 764.694 3695.42 764.694C3637.07 764.694 3587.82 745.154 3547.67 706.074C3508.05 666.458 3488.25 618.01 3488.25 560.728C3488.25 503.981 3507.52 455.801 3546.06 416.185C3585.14 376.034 3632.52 355.959 3688.2 355.959C3739.05 355.959 3781.35 372.555 3815.07 405.746C3849.34 438.937 3866.47 481.229 3866.47 532.622C3866.47 547.612 3864.86 563.137 3861.65 579.197ZM3554.9 524.592H3803.03C3802.49 490.33 3791.25 463.028 3769.3 442.685C3747.35 422.342 3719.78 412.17 3686.59 412.17C3653.94 412.17 3625.56 422.609 3601.47 443.488C3577.38 463.831 3561.86 490.866 3554.9 524.592Z" fill="white"/><circle cx="2369.05" cy="716.519" r="45.7447" fill="white"/><circle cx="1775.92" cy="560.264" r="205.633" fill="#CF0000"/><path xmlns="http://www.w3.org/2000/svg" d="M1633.17 559.995C1632.42 520.609 1646.43 486.524 1675.21 457.742C1703.99 428.96 1738.27 414.947 1778.03 415.705C1801.89 415.705 1823.67 421.007 1843.36 431.611C1863.05 442.215 1879.34 456.985 1892.21 475.92L1860.97 500.915C1839.01 470.997 1811.55 456.038 1778.6 456.038C1750.2 456.038 1726.34 466.263 1707.02 486.714C1687.71 506.786 1678.05 531.213 1678.05 559.995C1678.05 589.156 1687.71 613.961 1707.02 634.412C1726.34 654.484 1750.2 664.52 1778.6 664.52C1811.17 664.52 1838.44 649.75 1860.4 620.21L1891.65 644.637C1864.38 684.781 1826.51 704.853 1778.03 704.853C1737.89 704.853 1703.62 690.84 1675.21 662.816C1647.19 634.412 1633.17 600.138 1633.17 559.995Z" fill="white"/>',
    },
  },
};

const copyFunc = (message) => {
  // eslint-disable-next-line no-undef
  navigator.clipboard.writeText(message).then(
    () => console.log(message),
    () => console.log("text no copy")
  );
};

function SVGgeneral(props) {
  if (props.id === "viewAll") {
    return (
      <div style={{ display: "flex", flexWrap: "wrap" }}>
        {Object.keys(files.byId).map((iter) => (
          <button
            type="button"
            onClick={() => copyFunc(iter)}
            key={iter}
            style={{ padding: 5 }}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              version="1.1"
              preserveAspectRatio="xMinYMin"
              id={iter}
              width={40}
              height={40}
              viewBox="0 0 40 40"
            >
              <use xlinkHref={`#${prefix}-${iter}`} />
            </svg>
          </button>
        ))}
      </div>
    );
  }

  if (props.isHidden) {
    return (
      <svg display="none" style={{ display: "none" }}>
        {props.children}
      </svg>
    );
  }

  const file = files.byId[props.id];

  if (!file) return null;
  // const width = props.width || file.width || null;
  const height = props.height || file.height || null;
  const deltaWidth = props.height * (file.width / file.height) || null;

  const className = props.className || "SVGsettings";
  const viewBox = file.viewBox
    ? file.viewBox.join(" ")
    : `0 0 ${props.width} ${props.height}`;

  return props.isHidden ? (
    <svg display="none">{props.children}</svg>
  ) : (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      version="1.1"
      preserveAspectRatio="xMinYMin"
      width={deltaWidth}
      height={height}
      viewBox={viewBox}
      style={{
        fill: props.fill,
        stroke: props.stroke,
        ...props.style,
        display: "block",
      }}
      className={className}
      id={props.id}
    >
      <use xlinkHref={`#${prefix}-${props.id}`} />
    </svg>
  );
}

function SVGSourceGeneral() {
  return (
    <SVGgeneral isHidden>
      <defs>
        {Object.keys(files.byId).reduce((defs, fileId) => {
          const file = files.byId[fileId];
          return defs.concat(
            <g
              key={`${prefix}-${fileId}`}
              id={`${prefix}-${fileId}`}
              dangerouslySetInnerHTML={{ __html: file.data }}
            />
          );
        }, [])}
      </defs>
    </SVGgeneral>
  );
}

export { SVGgeneral, SVGSourceGeneral };
